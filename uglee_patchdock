#!/bin/bash
if [ "$#" -ne 3 ]; then
    echo "Usage: patchdock [receptor_pdb] [step] [start]"
    exit 1
fi
# Define directories
export scaffold_dir="/usr/local/PatchDock/scaffolds"

# Check and prepare the output directories
if [ -d pdbs ]; then
    rm -r pdbs
fi

if [ -d patchdock_out ]; then
    rm -r patchdock_out
fi

mkdir -p pdbs
mkdir -p patchdock_out

# Loop through the specified range
for f in $(seq $3 $2 22900); do
    # Initial score values
    score1=0
    score2=0
    score3=0
    
    # Extract ligandpdb name from the list
    ligandpdb=$(head -n $f $scaffold_dir/recommended_scaffolds.list | tail -n 1)
    if [ $? -ne 0 ]; then
        echo "loading scaffold failed"
        exit 1
    fi

    # Generate parameter file
    if ! buildParams_modi.pl $1 "/usr/local/PatchDock/scaffolds/$ligandpdb" 4 Default ${f}_params.txt; then
        echo "Failed to generate params for $f"
        exit 1 # Skip this iteration if params generation failed
    fi
    # Run patch_dock and monitor its log for "#3", then kill it if found
    patch_dock.Linux ${f}_params.txt $f.out > patch_dock_${f}.log 

    # Outside of the tail -f loop, now extract the scores
    score1=$(grep "   1 |" $f.out | awk '{printf ("%05.0f", $3)}')
    score2=$(grep "   2 |" $f.out | awk '{printf ("%05.0f", $3)}')
    score3=$(grep "   3 |" $f.out | awk '{printf ("%05.0f", $3)}')

    # Process based on scores
    if [ ${score3} -gt 12000 ]; then
        transOutput.pl $f.out 1 3
        mv $f.out.1.pdb pdbs/${score1}_${f}.pdb
        mv $f.out.2.pdb pdbs/${score2}_${f}.pdb
        mv $f.out.3.pdb pdbs/${score3}_${f}.pdb
    elif [ ${score2} -gt 12000 ]; then
        transOutput.pl $f.out 1 2
        mv $f.out.1.pdb pdbs/${score1}_${f}.pdb
        mv $f.out.2.pdb pdbs/${score2}_${f}.pdb
    else
        transOutput.pl $f.out 1 1
        mv $f.out.1.pdb pdbs/${score1}_${f}.pdb
    fi



    # Move and clean up files
    mv $f.out patchdock_out
    rm -f ${f}_params.txt
    rm -f patch_dock_${f}.log
    echo "==================${f}th scaffold done========================"
done
command_status=$?
if [ $command_status -eq 0 ]; then
    echo "==================succeeded======================"
else
    echo "=======================failed===================="
    exit 1
fi
