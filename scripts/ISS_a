#!/bin/bash

if [ ${#} -lt 3 ]; then
	echo "ISS [receptor pdb] [pdb_containing dir] [n/c]"
	exit 1
fi

echo "Make sure that your are running this script after picking out pdbs based on Patchdock score and crmsd"

# Receptor PDB file
receptor=$1

# Save the current directory
initial_dir=$(pwd)

# Directory containing PDB files
input_dir=$2

# Optional argument to determine the sequence order
target_location=${3:-c}  # Default to 'c' if no third argument is provided

###########################################################################################
#Runnign MPNN

# Loop through all PDB files in the input directory
for pdb_file in "$input_dir"/*.pdb; do
    # Check if there are no PDB files in the directory
    if [ ! -e "$pdb_file" ]; then
        echo "No PDB files found in the directory."
        exit 1
    fi

    # Print the name of the current PDB file
    echo "Processing $pdb_file..."

    # Run ligandmpnn on the PDB file
    ligandmpnn "$pdb_file"

    # Extract the base name without the .pdb extension
    name=$(basename "$pdb_file" .pdb)

    # Navigate to the fastas directory
    cd fastas || { echo "Directory 'fastas' not found."; exit 1; }

    # Navigate to the output directory for the current PDB file
    cd "${name}_outputs" || { echo "Directory '${name}_outputs' not found."; exit 1; }

    # Run split_fa on the corresponding .fa file
    split_fa "${name}.fa"

    # Return to the initial directory
    cd "$initial_dir"

done

echo "Processing completed for all PDB files."

###########################################################################################

###########################################################################################
#Making receptor_miniprotein complex fasta file without linker

if [ ! -d "complex_fastas" ]; then
        mkdir complex_fastas
fi

receptor_seq=$(pdb_tofasta "$receptor" | grep -v '>' | sed ':a;N;$!ba;s/\n//g')
receptor_name=$(basename "$receptor" .pdb)


# Loop through all Fasta files
for fasta_file in fastas/*_outputs/*.fasta; do

        # Print the name of the current Fasta file
        echo "Processing $fasta_file..."

        name=$(basename "$fasta_file" .fasta)

        miniprotein_seq=$(grep -v '^>' "$fasta_file" | sed ':a;N;$!ba;s/\n//g' )

        # Make complex sequence
	{
		echo ">${receptor_name}"
		echo "$receptor_seq"
		echo ">${name}"
		echo "$miniprotein_seq"
	} > "${name}_complex.fasta"

	mv "${name}_complex.fasta" complex_fastas

done

############################################################################################

############################################################################################
#Running Alphafold
#It is okay to change path as you want
#EX) export PATH="~/miniconda3/bin:$PATH"

export DOWNLOAD_DIR="/ssddata/alphafold_DB"
export output_dir="$initial_dir/complex"
export PATH="/home/uglee/miniconda3/bin:$PATH"
export PATH="/usr/local/bin:$PATH"

if [ ! -d "$output_dir" ]; then
	mkdir $output_dir
fi

source /home/uglee/miniconda3/bin/activate /home/uglee/miniconda3/envs/alphafold

for fasta_file in $initial_dir/complex_fastas/*.fasta; do
	echo "Processing file: $fasta_file"

	name=$(basename $fasta_file .fasta)
       
	# AlphaFold prediction script
	/home/uglee/alphafold-2.3.2/run_alphafold.sh \
	-d $DOWNLOAD_DIR \
	-o $output_dir \
	-l 1   \
	-m multimer \
	-c reduced_dbs \
	-f "$fasta_file" \
	-r true \
	-t 2023-05-14

	cd $output_dir
	cd $name

	source /home/uglee/miniconda3/bin/activate /home/uglee/miniconda3/envs/alphapickle
	python3 /home/uglee/alphapickle/run_AlphaPickle.py -od ./
	rm -rf *pkl msas

        cp $output_dir/$name/relaxed_model_*.pdb $output_dir
        mv $output_dir/relaxed_model_*.pdb $output_dir/${name}_relaxed_model.pdb

	conda deactivate

	
	
done

###############################################################################################

###############################################################################################
#Align to original pdb file to calculate rmsd

cd $initial_dir

# Create a file to store the RMSD scores
align_output_file="alignment_summary"
echo -e "Complex PDB File\tRMSD Score" > "$align_output_file"

if [ ! -f align_pdb.py ]; then
        cp /nashome/minho/scripts/align_pdb.py .
fi

# Loop through all PDB files in the 'complex' directory
for complex_pdb in ${output_dir}/*.pdb; do
    echo "Processing $complex_pdb..."

    ori_name=$(basename $complex_pdb | sed -E 's/_[0-9]+\.pdb$//')
    original=$(echo ${ori_name} | awk -F'_' '{print $1"_"$2"_"$3}')

    name=$(basename $complex_pdb)

    original_pdb="${input_dir}/$original.pdb"

    # Align the complex PDB with the original receptor PDB and calculate RMSD
    /usr/local/pymol/pymol -c align_pdb.py -- "$original_pdb" "$complex_pdb" "tmp_rmsd"

    # Extract the RMSD from the temporary file
    rmsd=$(cat "tmp_rmsd")

    echo -e "${name}\t${rmsd}" >> "$align_output_file"

    rm -f "tmp_rmsd"

done

sort -k2 -n "$align_output_file" > "sorted_${align_output_file}"

################################################################################################



echo "Predicting complex structures is done."
echo "Check complex directory"













