#!/bin/bash
#calculate the original energy
uglee_findrestrain_forcolab
uglee_em $1
input=$(basename $1 .pdb)
prodigy ${input}_start.pdb --selection A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,Y,Z X > "summary_original"
original_prodigy=$(grep "Predicted dissociation constant" "summary_original" | awk -F'e-' '{print $2}' | tr -d '^M')

# If the value starts with a 0, remove it
if [[ $original_prodigy == 0* ]]; then
    original_prodigy=${original_prodigy#0}
fi

echo " The original prodigy value is $original_prodigy"
rm ${input}_start.pdb
rm summary_original


# MPNN
uglee_mpnn $1




# ESMFOLD
uglee_esmfold  ${input}_mpnn_outputs




mkdir patchdock_dir
cp ${input}.pdb patchdock_dir
rm ef.log falist ttt

uglee_align patchdock_dir ef
# now cdockrun
echo "colabdock start..."
uglee_export_chain_name patchdock_dir/${input}.pdb 

read -r mini < chain.txt
read -r recep < <(sed -n '2p' chain.txt)

find ./ -maxdepth 1 -name '*ef*.pdb' > Emfold_finished_list
touch colabdock_finished_list
for f in $(sed -n '=' Emfold_finished_list)
do
    filename=$(head -$f Emfold_finished_list| tail -1)
    filename2=$(basename $filename .pdb)
    uglee_colab_1v1 ${filename} ${mini},${recep}
    cd results_${filename2}/docked 
    for old in {1st,2nd,3rd,4th,5th}_best.pdb; do
        new="${filename2}_${old}"
        mv "$old" "$new"
    done 
    cd ..
    cd ..   
    find ./results_${filename2}/docked -maxdepth 1 -name '*.pdb' >> colabdock_finished_list
done
rm LICENSE README.md chain.txt config.py extract_rest.py README.md rest requirements.txt main.py
rm -r colabdesign colabdock params protein __pycache__ 
echo " cdockrun_done"











echo "Checking for clashes by gromax"
while IFS= read -r filename; do
    result=$(uglee_detectclash_gmx "$filename")
    if [[ $result == "Yes" ]]; then
        echo "Clash deleting Gmx."
        rm "$filename"
    else
        echo "No clash, Gmx: $filename."
    fi
done < colabdock_finished_list

touch clash_gm_finished_list
for f in $(sed -n '=' Emfold_finished_list); do
    filename=$(head -$f Emfold_finished_list| tail -1)
    filename2=$(basename $filename .pdb)
    find ./results_${filename2}/docked -maxdepth 1 -name '*.pdb' >> clash_gm_finished_list
done

echo " clashed in gm pdb files are deleted"




echo "Checking for clashes by PyMOL"
while IFS= read -r filename; do
    result=$(uglee_detectclash_pymol_2A "$filename")
    if [[ "$result" == *"Yes"* ]]; then
        echo "Deleting... clash by PyMOL."
        rm "$filename"
    else
        echo "No clash PYMOL$filename."
    fi
done < clash_gm_finished_list

touch clash_pymol_finished_list
for f in $(sed -n '=' Emfold_finished_list); do
    filename=$(head -$f Emfold_finished_list| tail -1)
    filename2=$(basename $filename .pdb)
    find ./results_${filename2}/docked -maxdepth 1 -name '*.pdb' >> clash_pymol_finished_list
done

echo " clashed in PYMOL files are deleted"





echo "EM and PRODIGY START, YEAH!"
for g in $(sed -n '=' clash_pymol_finished_list);do
    filename3=$(head -$g clash_pymol_finished_list| tail -1)
    uglee_em ${filename3}
done
echo "EM DONE, YEAH!"
echo " compare the Kd value with the original one"
while IFS= read -r filename; do
    filename4=$(basename "$filename" .pdb)
    prodigy "${filename4}_start.pdb" --selection A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,Y,Z X > "log${filename4}.log"
    result=$(grep "Predicted dissociation constant" "log${filename4}.log" | awk -F'e-' '{print $2}' | tr -d '^M')
    
    # Assuming result is something like '09' (for 3.2e-09), remove leading zero if present
    if [[ $result == 0* ]]; then
        result=${result#0}
    fi
    
    # Compare floating point numbers
    if awk -v r="$result" -v o="$original_prodigy" 'BEGIN {exit !(r > o)}'; then
        echo "Awesome!$filename has good Kd"
        grep "dissociation" "log${filename4}.log" >> "summary${filename4}"
        rm "log${filename4}.log"
    else
        echo "Not good Kd, deleteing.."
	    rm "$filename"
        rm "log${filename4}.log"
    fi
done < clash_pymol_finished_list




echo "SUMMARY START, YEAH!"
find . -maxdepth 1 -name 'summary*' > ./summary_list
echo "Kd values of super proteins!" > summary_all
for f in $(sed -n '=' summary_list)
do
    filename=$(head -$f summary_list| tail -1)
    printf "${filename} " >> summary_all
    head -n 1 "$filename" >> summary_all
done
for file in summary[0-9]*; do
    if [[ $file =~ ^summary[0-9]+$ ]]; then
        rm "$file"
    fi
done
echo " Summary END, YEAH!"
rm summary_list
echo "OPTIMIZING DONE!"


# Check if the word "dissociation" is in summary_all
if grep -q "dissociation" summary_all; then
    echo "********************************Better mini-protein is found********************************"
    echo "!!!!!!!!!!!!!!important: If you want to do more optimization, please run change the pdb file. For example: name1_name2_name3.pdb"
else
    echo "%%%%%%%%%%%%%%%%%%%%%%%%No better mini-protein is found. We will try again.%%%%%%%%%%%%%%%%%%%%%%%%"
    # If the word "dissociation" is not found and verify the current directory
    current_directory_name=$(basename "$PWD")
    if [[ $current_directory_name == $current_directory_name ]]; then # This condition always evaluates to true as it is written. Adjust if needed.
        mkdir "../A_for_$current_directory_name"
        cp "$1" "../A_for_$current_directory_name"
        cd "../A_for_$current_directory_name"
        $0 "${input}.pdb"
    fi
fi

